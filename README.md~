# CarND-Controls-MPC
Self-Driving Car Engineer Nanodegree Program

---

## BRIAN LEE

## The Model
Bicycle model was used for this project. Bicycle models have the advantage of closely approximating the more complex 4-wheel vehicle dynamics with comparatively simpler computation loads. Also, bicycle models have the advantage of being easily transferred to other vehicles regardless of size or shape. However, certain parameters such as Lf should be adjusted. Lf defines the distance between the Center of Gravity of the vehicle to the front of the vehicle. If this value is large, it means it is very difficult for the vehicle to make turns (imagine a train). On the contrary, if this value is small, it is very easy for the vehicle to make sharp turns with the same amount of steering (think of a smart-car). By adjusting the Lf value, it is possible to force the model predictive solver to find solution in a way that will affect the steering angles it solves (i.e. high Lf value will force the solver to find sharper steering angles to best-fit the waypoint polynomial - minimizing the cost as best as possible). Therefore, unnecessarily putting high Lf value will lead to very sharp steering angles, which would make the simulator car to swerve side to side and eventually going off the track due its momentum. It is critical to use the correct Lf value and I elected to use the value given by the project's base code as it is the value measured for the simulator vehicle.

The state is divided into 6 states: position of x in map coordinates, position of y in map coordinates, heading angle in map coordinates, current speed, cross-track error, and heading-error.
Two actuators were used: the steering angle or delta (basically steering system of the car, such as EPS), and the acceleration or throttle (engine for gas vehicle, electric motor for electric vehicle).

The following update equations were used (same as those given in udacity lecture):

![equations](./eqns.png)

And then the variables for the solver were defined. Variable for each state for each time-step was defined to be the difference between the current state and subsequent state (next time-step). Then the solver would go ahead and tune the actuator parameters (accel and steering angle) iteratively until the cost defined at fg[0] would be the least as possible. It was very important how the cost functions were defined as the solver would rely on the cost value of each iteration to decide whether to increment or decrement the acceleration and steering angle values of all the time-steps. 

Every time the mpc solver computes what the best array of acceleration and steering angles are for the next N time-steps, the first time-step's acceleration and steering angle value are sent to the simulator and the simulator starts to execute it in its simulated phyiscal model. While the simulator is doing this, the mpc solver will be fed the current states and try to compute for the next N time-steps again. So basically, for every frame, the mpc algorithm will look ahead N-time steps and "predict" what the best sets of acceleration and steering angles are, hence this is sometimes given the name model "predictive" control.

The cost function tuning was the most effective element in making the vehicle drive smoothly & without going off the track at higher speeds. After printing out the cte, epsi, delta, a, and velocity values, I realized there is a huge discrepancy between the the difference in velocity values are and the other values. Approximately, the cte is -1~1, epsi is -0.3~0.3, delta is around -0.15~0.15 (change in delta is usually smaller, but could be bigger), acceleration is -1~1 (change in accleration is usually smaller, but could be bigger), but velocity difference with the reference velocity could be anywhere from 0 to 100! (if ref_v is set to 100. bigger range if ref_v is set bigger). Using squared errors, it was easy to see that the errors due to velocity were too large causing the solver to make the velocity difference between ref_v and the current velocity as small as possible at all cost! (even if unideal acceleration and steering values need to be employed, as long as reference velocity is kept!!). This was obviously not good. At lower speeds, the vehicle managed to stay on track, but at higher speeds, the vehicle quickly went off the bounds. So, I had to balance out the relative values of the cte and epsi with the error in velocity. It's easy to see that a large value would need to be multiplied (consider average error velocity is 20 - lower in straight line and higher in tight curves, then this would have 400 times the value as cte at least and 1200 times more than epsi!). The usual cte would be even less than -1~1 so a number of in the 1000's should have been multiplied to cte and epsi squared errors so that the solver can take the cte, epsi, and velocity equally in consideration when solving the parameters! As for delta and a, they are already softened by the lower_bounds and upper_bounds, and I wanted them to vary as much as possible within the bounds to keep the vehicle following the waypoints, so I gave them the least penalizations. At higher speeds, the deltas would need to change quite abruptly around tight corners, so I didn't penalize the change in delta. For acceleration however, too much change in acceleration would mean a lot of discomfort for the passenger, so I penalized with an adequate amount of 20 (but still not given much important compared to cte, epsi, and error in velocity).

Finally, I applied 2000 penalization factors to the squared costs for cte and epsi, 0.25 for error in velocity (well in this case it's the opposite of penalization. basically an effort to bring vehicle speed error closer to the ranges as other parameter ranges), and 20 for change in accleration.

*I made the lower_bound for accleration to be 0 so that the driving can be smooth! (nobody wants a hard negative g while driving at high speeds! you don't want to throw up!). The mpc solver still found the best set of accel and steering to accomodate no braking. The vehicle really drives like a human racer now! (max speed it could reach this way was 100mph).
*Negative value had to be applied to steer_value due to the way the simulator accepts the steer_values (negative value: left turn, positive value: right turn).


## Timestep Length and Elapsed Duration (N & dt)
I first started with the default 25 steps with 40mph. I thought reducing dt will help a lot more because it will be able to compute the most accurate sets of acceleration and steering angles for each frame. However, this was quickly proven false. Well technically, in an ideal world, if the car was able to react to steering command and accleration instantly (i.e. no communication delay time - 100ms set my project constraint - as well as no delay due to vehicle's inertia), then reducing dt would certainly help. The car would probably be able to achieve very close to 0 cost and perfectly follow the waypoints. What's more! If infinite degree of polynomials could be used to connect the waypoints, the car would be able to "perfectly" follow the waypoints of dt was very very small (i.e. 0.0000000001) with near infinite time-steps. However, this isn't possible because computation time would take way longer than that (well.. if you had super computers.. nono but still no!). 

All jokes aside, by measuring how long 1 mpc solving process takes and combining with the 100ms communication delay set by the project, I computed dt to be 130ms (100ms + 30ms of processing delay). 30ms was a rough average value of multiple processing delays measured. Obviously for some situations, the solver can quickly find the best parameters (say if the car was already going straight with 0 heading error perfectly on the waypoint, and the waypoints ahead are also in straight-line), but in other situations the solver would take longer time. 

With the dt set to 130ms, I went ahead and played around the the N value. I needed to make sure the mpc doesn't look too far ahead as triple curves won't be able to be characterized by 3rd order polynomial function. Also, even double-curves would have the 3rd order curve fitting with quite a bit of errors. In addition, the waypoints weren't really perfect - the distance between waypoints was actually quite big. With all this in consideration, I roughly measured how long it takes for the vehicle to meet complex curves, and estimated that roughly 1 second would do. So I just picked 10. Going with 9 or 8 would also work as well.


## Polynomial Fitting and MPC Preprocessing
Waypoints, the vehicle state, actuators are turned into vehicle coordinate
I tried 1st degree, 2nd degree, and 3rd degree fitting. 1st degree was obviously a failure as it couldn't draw useful lines when it came to curves. 2nd degree worked quite well actually, but it made unnecessary oscillations on straight-lines when big enough N numbers were used. So I went with 3rd order degree and it made the driving smoother. I understand why the industry uses the 3rd order a lot. Computation loads were a bit more but it was worth it.

As for MPC pre-processing, before polynomial fitting, the waypoints were transformed into vehicle's coordinate (the current position of the vehicle would be 0(x), 0(y), and wherever it's headed would be psi = 0 degrees). This was done to simplify the math. This way, the cross-track error would simply be the y-value (side to side w.r.t. the vehicle) and the psi error would be the slope of the fitted curve at x=0. Transformation matrix was used to convert the waypoints in map-coordinates to the vehicle coordinates. Hence, the initial vehicle state for each frame could be defined as 0(x), 0(y), 0(psi), and then the current velocity, current cte, and current heading error.

## Model Predictive Control with Latency
I've first tried creating predicted state for the next time-step(dt=130ms), but this didn't work well because it assumes the vehicle advances in a straight-line fashion forward. (x advances by v*dt, and psi just changes based on last steering angle value is. This wasn't a good approximation of where the vehicle would be 130ms later. If dt was smaller, this method might have worked but it would still have given poor performance if lots of curves were involved in the track. 

Failing a few times, I had to search for another answer. While driving my real car on the way / back from work I pondered upon this and realized that if I can fool the solver to solve the problem with the accleration and steering angles of the previous time-step (i.e. artificially introducting one step delay for the steering and acceleration). Imagine if the dt was 5 seconds (the vehicle actually reacts after 5 seconds.. horrible vehicle), then whatever steering angle I make with my steering wheel and whatever acceleration I create by pressing on the accel pedal, will take effect 5 seconds later. And this phenomenon would repeat for the next 10 time-steps. Now, if on my 2nd time-step, if I force the solver to use my 1st time-step acceleration and steering values, then the solver would be forced to still find the best set of parameters while best fitting the waypoint polnomial curve. And this is perfect! Because in actuality, by the time the solver is at the 2nd time-step (and looking ahead to the rest of the time-steps in the future), the vehicle would still be executing the previous time-step's acceleration and steering command! So in constraint definition part in the mpc.cpp file's FG_eval class definition, I made the vars for a and delta so that they use the previous time-frame's a and delta for every time-step. 

This greatly reduced any oscillations especially executing turns, where the most execution delay impact would be (overshooting), and coming out of turns and then stabilizing onto straight lines.



## Dependencies

* cmake >= 3.5
 * All OSes: [click here for installation instructions](https://cmake.org/install/)
* make >= 4.1(mac, linux), 3.81(Windows)
  * Linux: make is installed by default on most Linux distros
  * Mac: [install Xcode command line tools to get make](https://developer.apple.com/xcode/features/)
  * Windows: [Click here for installation instructions](http://gnuwin32.sourceforge.net/packages/make.htm)
* gcc/g++ >= 5.4
  * Linux: gcc / g++ is installed by default on most Linux distros
  * Mac: same deal as make - [install Xcode command line tools]((https://developer.apple.com/xcode/features/)
  * Windows: recommend using [MinGW](http://www.mingw.org/)
* [uWebSockets](https://github.com/uWebSockets/uWebSockets)
  * Run either `install-mac.sh` or `install-ubuntu.sh`.
  * If you install from source, checkout to commit `e94b6e1`, i.e.
    ```
    git clone https://github.com/uWebSockets/uWebSockets
    cd uWebSockets
    git checkout e94b6e1
    ```
    Some function signatures have changed in v0.14.x. See [this PR](https://github.com/udacity/CarND-MPC-Project/pull/3) for more details.

* **Ipopt and CppAD:** Please refer to [this document](https://github.com/udacity/CarND-MPC-Project/blob/master/install_Ipopt_CppAD.md) for installation instructions.
* [Eigen](http://eigen.tuxfamily.org/index.php?title=Main_Page). This is already part of the repo so you shouldn't have to worry about it.
* Simulator. You can download these from the [releases tab](https://github.com/udacity/self-driving-car-sim/releases).
* Not a dependency but read the [DATA.md](./DATA.md) for a description of the data sent back from the simulator.


## Basic Build Instructions

1. Clone this repo.
2. Make a build directory: `mkdir build && cd build`
3. Compile: `cmake .. && make`
4. Run it: `./mpc`.

## Tips

1. It's recommended to test the MPC on basic examples to see if your implementation behaves as desired. One possible example
is the vehicle starting offset of a straight line (reference). If the MPC implementation is correct, after some number of timesteps
(not too many) it should find and track the reference line.
2. The `lake_track_waypoints.csv` file has the waypoints of the lake track. You could use this to fit polynomials and points and see of how well your model tracks curve. NOTE: This file might be not completely in sync with the simulator so your solution should NOT depend on it.
3. For visualization this C++ [matplotlib wrapper](https://github.com/lava/matplotlib-cpp) could be helpful.)
4.  Tips for setting up your environment are available [here](https://classroom.udacity.com/nanodegrees/nd013/parts/40f38239-66b6-46ec-ae68-03afd8a601c8/modules/0949fca6-b379-42af-a919-ee50aa304e6a/lessons/f758c44c-5e40-4e01-93b5-1a82aa4e044f/concepts/23d376c7-0195-4276-bdf0-e02f1f3c665d)
5. **VM Latency:** Some students have reported differences in behavior using VM's ostensibly a result of latency.  Please let us know if issues arise as a result of a VM environment.

## Editor Settings

We've purposefully kept editor configuration files out of this repo in order to
keep it as simple and environment agnostic as possible. However, we recommend
using the following settings:

* indent using spaces
* set tab width to 2 spaces (keeps the matrices in source code aligned)

## Code Style

Please (do your best to) stick to [Google's C++ style guide](https://google.github.io/styleguide/cppguide.html).

## Project Instructions and Rubric

Note: regardless of the changes you make, your project must be buildable using
cmake and make!

More information is only accessible by people who are already enrolled in Term 2
of CarND. If you are enrolled, see [the project page](https://classroom.udacity.com/nanodegrees/nd013/parts/40f38239-66b6-46ec-ae68-03afd8a601c8/modules/f1820894-8322-4bb3-81aa-b26b3c6dcbaf/lessons/b1ff3be0-c904-438e-aad3-2b5379f0e0c3/concepts/1a2255a0-e23c-44cf-8d41-39b8a3c8264a)
for instructions and the project rubric.

## Hints!

* You don't have to follow this directory structure, but if you do, your work
  will span all of the .cpp files here. Keep an eye out for TODOs.

## Call for IDE Profiles Pull Requests

Help your fellow students!

We decided to create Makefiles with cmake to keep this project as platform
agnostic as possible. Similarly, we omitted IDE profiles in order to we ensure
that students don't feel pressured to use one IDE or another.

However! I'd love to help people get up and running with their IDEs of choice.
If you've created a profile for an IDE that you think other students would
appreciate, we'd love to have you add the requisite profile files and
instructions to ide_profiles/. For example if you wanted to add a VS Code
profile, you'd add:

* /ide_profiles/vscode/.vscode
* /ide_profiles/vscode/README.md

The README should explain what the profile does, how to take advantage of it,
and how to install it.

Frankly, I've never been involved in a project with multiple IDE profiles
before. I believe the best way to handle this would be to keep them out of the
repo root to avoid clutter. My expectation is that most profiles will include
instructions to copy files to a new location to get picked up by the IDE, but
that's just a guess.

One last note here: regardless of the IDE used, every submitted project must
still be compilable with cmake and make./

## How to write a README
A well written README file can enhance your project and portfolio.  Develop your abilities to create professional README files by completing [this free course](https://www.udacity.com/course/writing-readmes--ud777).
